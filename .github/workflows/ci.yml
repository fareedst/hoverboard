name: 🚀 Hoverboard CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  CHROME_BIN: google-chrome-stable
  CI: true

jobs:
  # 🧪 Testing Pipeline
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🔍 Lint Code
      run: npm run lint
      
    - name: 🧪 Run Unit Tests
      run: npm run test:unit
      
    - name: 🔗 Run Integration Tests
      run: npm run test:integration
      
    - name: 📊 Generate Coverage Report
      run: npm run test:coverage
      
    - name: 📈 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./coverage
        fail_ci_if_error: true
        
    - name: 🔒 Security Audit
      run: npm audit --audit-level=moderate

  # 🎭 End-to-End Testing
  e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🏗️ Build Extension
      run: npm run build:dev
      
    - name: 🌐 Install Chrome
      uses: browser-actions/setup-chrome@latest
      
    - name: 🎭 Run E2E Tests
      run: npm run test:e2e
      env:
        SCREENSHOT_ON_FAILURE: true
        
    - name: 📸 Upload Screenshots
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-screenshots
        path: test-results/screenshots/
        retention-days: 7

  # 🏗️ Build Pipeline
  build:
    name: 🏗️ Build Extension
    runs-on: ubuntu-latest
    needs: [test, e2e]
    
    strategy:
      matrix:
        build-type: [dev, prod]
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🏗️ Build Extension (${{ matrix.build-type }})
      run: npm run build:${{ matrix.build-type }}
      
    - name: ✅ Validate Manifest
      run: npm run validate:manifest
      
    - name: 📦 Package Extension
      if: matrix.build-type == 'prod'
      run: |
        cd dist
        zip -r ../hoverboard-extension.zip .
        
    - name: 📤 Upload Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: hoverboard-${{ matrix.build-type }}
        path: ${{ matrix.build-type == 'prod' && 'hoverboard-extension.zip' || 'dist/' }}
        retention-days: 30

  # 🔍 Quality Assurance
  quality:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🔍 Run Quality Checks
      run: npm run quality:check
      
    - name: 📊 Generate Test Report
      run: npm run test:coverage -- --reporters=default --reporters=jest-junit
      
    - name: 📈 Publish Test Results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Jest Test Results
        path: test-results/junit.xml
        reporter: jest-junit

  # 🚀 Deployment Pipeline
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, quality]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Download Build Artifact
      uses: actions/download-artifact@v3
      with:
        name: hoverboard-prod
        
    - name: 🚀 Deploy to Chrome Web Store (Beta)
      env:
        CHROME_EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
        CHROME_CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
        CHROME_CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
        CHROME_REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}
      run: |
        echo "🚀 Deploying to Chrome Web Store (Beta Channel)"
        # Chrome Web Store deployment script would go here
        
    - name: 📢 Create Deployment Comment
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: '🚀 Extension deployed to staging environment'
          })

  deploy-production:
    name: 🏆 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, quality]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: 📥 Download Build Artifact
      uses: actions/download-artifact@v3
      with:
        name: hoverboard-prod
        
    - name: 🏆 Deploy to Chrome Web Store (Production)
      env:
        CHROME_EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
        CHROME_CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
        CHROME_CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
        CHROME_REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}
      run: |
        echo "🏆 Deploying to Chrome Web Store (Production)"
        # Chrome Web Store deployment script would go here
        
    - name: 📦 Attach Extension to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./hoverboard-extension.zip
        asset_name: hoverboard-extension-${{ github.event.release.tag_name }}.zip
        asset_content_type: application/zip
        
    - name: 📢 Notify Team
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: '🎉 Extension successfully deployed to production!'
          })

  # 🔔 Notification Pipeline
  notify:
    name: 🔔 Notifications
    runs-on: ubuntu-latest
    needs: [test, e2e, build, quality]
    if: always()
    
    steps:
    - name: 📊 Calculate Status
      id: status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.e2e.result }}" == "success" && "${{ needs.build.result }}" == "success" && "${{ needs.quality.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "emoji=✅" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "emoji=❌" >> $GITHUB_OUTPUT
        fi
        
    - name: 🔔 Send Slack Notification
      if: env.SLACK_WEBHOOK_URL != ''
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{
            "text": "${{ steps.status.outputs.emoji }} Hoverboard CI/CD Pipeline",
            "attachments": [{
              "color": "${{ steps.status.outputs.status == 'success' && 'good' || 'danger' }}",
              "fields": [
                {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "Branch",
                  "value": "${{ github.ref_name }}",
                  "short": true
                },
                {
                  "title": "Status",
                  "value": "${{ steps.status.outputs.status }}",
                  "short": true
                },
                {
                  "title": "Commit",
                  "value": "<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>",
                  "short": true
                }
              ]
            }]
          }' \
          $SLACK_WEBHOOK_URL

  # 📊 Performance Monitoring
  performance:
    name: 📊 Performance Analysis
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 📥 Download Build Artifact
      uses: actions/download-artifact@v3
      with:
        name: hoverboard-prod
        path: ./dist
        
    - name: 📊 Analyze Bundle Size
      run: |
        echo "## 📊 Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
        echo "| File | Size | Gzipped |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|---------|" >> $GITHUB_STEP_SUMMARY
        
        find ./dist -name "*.js" -o -name "*.css" | while read file; do
          size=$(stat -c%s "$file")
          gzipped=$(gzip -c "$file" | wc -c)
          filename=$(basename "$file")
          echo "| $filename | ${size} bytes | ${gzipped} bytes |" >> $GITHUB_STEP_SUMMARY
        done
        
    - name: 🔍 Security Scan
      run: |
        echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
        npm audit --json | jq -r '.vulnerabilities | to_entries[] | "- \(.key): \(.value.severity)"' >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found" >> $GITHUB_STEP_SUMMARY 